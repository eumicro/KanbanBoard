package org.kanban.presenter.database;

import java.util.List;

import org.kanban.model.Board;
import org.kanban.model.User;
import org.kanban.presenter.database.exceptions.DataBaseErrorException;
import org.kanban.presenter.database.exceptions.DataBaseNotAvailableException;
import org.kanban.presenter.database.exceptions.InvalidDBInputException;
import org.kanban.presenter.kanbanmanagement.exceptions.BoardDoesNotExistException;
import org.kanban.presenter.usermanagement.exceptions.InvalidUserDataException;
import org.kanban.presenter.usermanagement.exceptions.UserAlreadyExistsException;
import org.kanban.presenter.usermanagement.exceptions.UserDoesNotExistException;

public interface DataBaseInterface {
	/**
	 * gets a list with users boards where she is ivited or is owner in.
	 * 
	 * @param user
	 * @return List<Board>
	 * @throws DataBaseErrorException
	 */
	public List<Board> getUsersBoards(User user)
			throws DataBaseNotAvailableException, DataBaseErrorException;

	/**
	 * store a new board in the data base and returns an id generated by dbms.
	 * 
	 * @throws DataBaseErrorException
	 */
	public Board createBoard(Board board) throws InvalidDBInputException,
			DataBaseNotAvailableException, DataBaseErrorException;

	/**
	 * deletes an existing board.
	 * 
	 * @param board
	 * @throws DataBaseErrorException
	 */
	public void deleteBoard(Board board) throws BoardDoesNotExistException,
			DataBaseNotAvailableException, DataBaseErrorException;

	/**
	 * stores the updated content of the board.
	 * 
	 * @param board
	 * @throws DataBaseErrorException
	 */
	public void updateBoard(Board board) throws BoardDoesNotExistException,
			InvalidDBInputException, DataBaseNotAvailableException,
			DataBaseErrorException;

	/**
	 * Stores a new user and returns a user with a valid ID generated by dbms.
	 * 
	 * @param user
	 * @return
	 * @throws DataBaseNotAvailableException
	 * @throws DataBaseErrorException
	 */
	public User createUser(String username, String password)
			throws UserAlreadyExistsException, InvalidUserDataException,
			DataBaseNotAvailableException, DataBaseErrorException;

	/**
	 * deletes an existing user or throws a message if she does not exist.
	 * 
	 * @param user
	 * @throws UserDoesNotExistException
	 * @throws DataBaseErrorException
	 */
	public void deleteUser(User user) throws UserDoesNotExistException,
			DataBaseNotAvailableException, DataBaseErrorException;

	/**
	 * checks if the user's input data is valid.
	 * 
	 * @param username
	 * @param password
	 * @return
	 * @throws UserDoesNotExistException
	 * @throws InvalidDBInputException
	 * @throws DataBaseErrorException
	 */
	public boolean checkLogIn(String username, String password)
			throws UserDoesNotExistException, DataBaseNotAvailableException,
			InvalidDBInputException, DataBaseErrorException;

	/**
	 * gets user by given ID, from database or throws an exception defined
	 * bellow.
	 * 
	 * @param id
	 * @return
	 * @throws UserDoesNotExistException
	 * @throws DataBaseNotAvailableException
	 */

	public User getUserById(Long id) throws UserDoesNotExistException,
			DataBaseNotAvailableException;

	/**
	 * gets user by given user name, from database or throws an exception
	 * defined bellow.
	 * 
	 * @param String
	 *            name
	 * @return User user
	 * @throws UserDoesNotExistException
	 * @throws DataBaseNotAvailableException
	 * @throws DataBaseErrorException
	 */
	public User getUserByName(String username)
			throws UserDoesNotExistException, DataBaseNotAvailableException,
			DataBaseErrorException;

	/**
	 * gets ALL users of the board.
	 * 
	 * @param board_id
	 * @return
	 * @throws BoardDoesNotExistException
	 * @throws DataBaseNotAvailableException
	 */
	public List<User> getUsersOfBoard(Long board_id)
			throws BoardDoesNotExistException, DataBaseNotAvailableException;

	/**
	 * gets users with the name similar to the input parameter
	 * 
	 * @param name
	 * @return list of found users or an empty list (NOT NULL)!
	 * @throws DataBaseNotAvailableException
	 * @throws DataBaseErrorException
	 */
	public List<User> getUsersLikeName(String name)
			throws DataBaseNotAvailableException, DataBaseErrorException;

	public boolean isUser(String username) throws InvalidDBInputException,
			DataBaseNotAvailableException, DataBaseErrorException;

	public void updateUser(User user) throws UserDoesNotExistException,
			DataBaseErrorException;

	public Board getBoardById(Long board_id) throws BoardDoesNotExistException,
			DataBaseNotAvailableException, DataBaseErrorException;

}
